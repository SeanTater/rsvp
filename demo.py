#!/usr/bin/python3
import cv2
import numpy as np

def demo():
    vc = cv2.VideoCapture()
    vc.open("snippet.webm")
    images = np.stack([vc.read()[1] for i in range(24)])
    # Divide into 8x8x8 cubes
    frame_count, width, height, colors = images.shape
    assert width % 8 == 0 and height % 8 == 0, "The image dimensions must be divisible by 8"
    vc.release()
    return images

def shatter(images):
    """ Shatter a series of frames into 8x8x8x3 tensors

        Accepts
        -------
        images : np.array of shape (frame_count, width, height, colors) and dtype uint8
            The sequence of images to analyze.
            The width, height, and frame count must all be multiples of 8.
    """
    frame_count, width, height, colors = images.shape
    t = images.reshape((frame_count // 8, 8, width // 8, 8, height // 8, 8, colors))
    # Make it a (x,y,z,8,8,8,3) tensor so it's a prism of cubes, by color
    t = np.moveaxis(t, [0,2,4,1,3,5,6], [0,1,2,3,4,5,6])
    return t


def generate_base(cubes, embed=100, colors=3):
    """ Create a base to summarize video segments

        Accepts
        -------
        cubes : np.array of shape (N,8,8,8,3) and dtype uint8
            The array of video segments to analyze
        
        Returns
        -------
        np.array of shape (8*8*8*3, embed)
    """
    samples = cubes.reshape((-1, 8*8*8*colors))

    # Try a basic SVD approximation
    #base = np.random.uniform(0, 1, (8*8*8*colors, embed))
    #breakpoint()
    #base = np.linalg.qr(np.dot(samples, base))[0]
    #base = np.linalg.qr(np.dot(samples, base))[0]
    
    return np.linalg.svd(samples[::13], full_matrices=False)[2][:embed].T.astype(np.float32)

def project(base, cubes):
    """ Encode images with eigenvectors, using an existing base

        Accepts
        -------
        base : np.array of shape (8*8*8*colors, embed)
            Linear basis for description of video segments, generated by generate_base()
        cubes : np.array of shape (N,8,8,8,3) and dtype uint8
            The array of video segments to analyze

        Returns
        -------
        np.array of shape (w*h*f, embed)
            where w = width // 8,
                  h = height // 8
                  f = frames // 8
    """
    d,w,h = cubes.shape[:3]
    s,e = base.shape
    return np.dot(cubes.reshape((-1, 8*8*8*3)), base).reshape((d,w,h,e))

def reproject(base, proj):
    """ Decode cubes back from embedding
        
        Accepts
        -------
        base : np.array of shape (8*8*8*colors, embed)
            Linear basis for description of video segments, generated by generate_base()
        proj : np.array of shape (d,w,h,embed)
            where d, w, h are the time, width, and height of the video measured in cubes
        
        Returns
        -------
        np.array of (d, w, h, 8, 8, 8, 3)
            where d, w, h are the time, width, and height of the video measured in cubes
            as would be useful to pass to reassemble()
        
    """
    d,w,h = proj.shape[:3]
    s,e = base.shape
    reproj = np.dot(proj.reshape((-1, e)), base.T).reshape((d,w,h,8,8,8,3))
    return np.clip(reproj, 0, 255).astype(np.uint8)

def reassemble(cubes):
    """ Convert cubes back into normal frames
    
        Accepts
        -------
        cubes : np.array of (d, w, h, 8, 8, 8, 3)
            where d, w, h are the time, width, and height of the video measured in cubes
            as would be useful to pass to reassemble()
        
        Returns
        -------
        np.array of shape (frame_count, width, height, colors) and dtype uint8
            The sequence of images to analyze.
            The width, height, and frame count must all be multiples of 8.
        
    
    """
    d,w,h = cubes.shape[:3]
    uncube = np.moveaxis(cubes, [0,1,2,3,4,5,6], [0,2,4,1,3,5,6])
    return uncube.reshape((d*8, w*8, h*8, 3))

def undemo(images):
    """ Save images to a video file as VP8
    
        Accepts
        -------
        images : np.array of shape (frame_count, width, height, colors) and dtype uint8
            The sequence of images to analyze.
            The width, height, and frame count must all be multiples of 8.
    """
    d,w,h = images.shape[:3]
    vw = cv2.VideoWriter("undemo.mkv", cv2.VideoWriter_fourcc(*'VP80'), 5, (h,w))
    for frameid in range(d):
        vw.write(images[frameid])
    vw.release()
    
if __name__ == "__main__":
    images = demo()
    cubes = shatter(images)
    base = generate_base(cubes)
    proj = project(base, cubes)
    reproj = reproject(base, proj)
    newimages = reassemble(reproj)
    undemo(newimages)
    breakpoint()
